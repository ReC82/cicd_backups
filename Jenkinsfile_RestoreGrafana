pipeline {
    agent {
        label "main"
    }

    environment {
        // SERVER CONFIG
        GRAFANA = "10.1.6.4"

        // SERVER CREDENTIALS
        GRAFANA_CREDS_ID = "monitoring.pem"

        // RESTORE SCRIPTS CONFIG
        GRAFANA_SCRIPT="/var/lib/grafana/backup/restore_grafana_db.sh"

        // BACKUP FOLDER
        GRAFANA_BKP_FOLDER="./backups/grafana"

        // EMAIL CONFIG
        RECIPIENTS = 'lody.devops@gmail.com'
        SENDER_EMAIL = 'jenkins@lodywood.be'

        // GIT CONFIG
        ARTIFACT_REPO = 'git@github.com:ReC82/cicd_backups.git'
        GIT_CREDENTIALS = 'GitJekinsToken'
        TARGET_BRANCH = 'main'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage("Clone Git Repository") {
            steps {
                git(
                    url: "https://github.com/ReC82/cicd_backups.git",
                    branch: "main",
                    changelog: true,
                    poll: true
                )
            }
        }

        // GRAFANA RESTORE
        stage('Restore Grafana') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(
                        credentialsId: env.GRAFANA_CREDS_ID,
                        keyFileVariable: 'SSH_KEY_FILE',
                        usernameVariable: 'SSH_USER'
                    )]) {
                        sh """
                            ssh-keyscan \${GRAFANA} >> ~/.ssh/known_hosts

                            ssh -i \${SSH_KEY_FILE} -o StrictHostKeyChecking=no \${SSH_USER}@\${GRAFANA} \\
                                "cd /tmp && sudo -u grafana bash \${GRAFANA_SCRIPT}"
                        """
                    }
                }
            }
        }         
    }
    post {
        failure {
            emailext(
                subject: "Grafana Restore failed: ${currentBuild.fullDisplayName} - ${currentBuild.result}",
                body: """
                Build Result: ${currentBuild.result}
                Build Number: ${currentBuild.number}
                Build URL: ${env.BUILD_URL}
                You can download the build report [here](${env.BUILD_URL}artifact/build-report.txt).
                """,
                to: env.RECIPIENTS,
                from: env.SENDER_EMAIL,
                attachLog: true
            )
        }
    }
}